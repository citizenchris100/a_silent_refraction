=== Test: scrolling_camera_test ===
Exit code: 0
Godot Engine v3.5.2.stable.official.170ba337a - https://godotengine.org
OpenGL ES 2.0 Renderer: Mesa Intel(R) Graphics (ADL GT2)
 
[DEBUG SINGLETON] Initialized - Press backtick (`) key for console
CoordinateManager initialized
ScrollingCamera._ready() called - Script Path: res://src/core/camera/scrolling_camera.gd
ScrollingCamera class loaded - Script ID: 1303
[TRACE] Camera initialized with screen size: (1424, 952)
Debug drawing is disabled
No target player set
[CAMERA DEBUG] CoordinateManager singleton not available for registration
WARNING: ScrollingCamera could not find a player node
Using default camera bounds based on screen size
Initializing DefaultBoundsValidator with bounds: (0, 0, 1424, 952)
BoundsValidator initialized: Reference

===== CAMERA INITIAL POSITION SETUP =====
Current camera position: (0, 0)
Initial position setting: (0, 0)
Initial view setting: right
Screen size: (1424, 952)

===== CALCULATING OPTIMAL ZOOM =====
Could not find background information - camera zoom unchanged
===== ZOOM CALCULATION COMPLETE =====

Camera half size (screen size / 2 / zoom): (712, 476)
Camera bounds: (0, 0, 1424, 952)
Background wide enough for scrolling: False
Background width: 1424, Min width for scrolling: 2136
Using RIGHT initial view setting
Centering camera on walkable area: (712, 476)
Setting camera position to: (712, 476)
Camera position after setting: (712, 476)
[CAMERA DEBUG] Checking camera position against walkable area center
Camera positioned for initial view: right at (712, 476)
View ratio: 100% of background is visible (1424 pixels of 1424 pixels)
===== CAMERA INITIAL POSITION SETUP COMPLETE =====

[CAMERA DEBUG] Camera initialized in IDLE state
ScrollingCameraTest: Using existing camera: TestCamera
ScrollingCameraTest: Created mock player at position: (500, 500)
Setting target_player to: MockPlayer:[Node2D:1318]
[CAMERA DEBUG] Camera state changed from IDLE to FOLLOWING_PLAYER
ScrollingCameraTest: Starting ScrollingCamera unit tests
ScrollingCameraTest: === Running Basic Tests ===
ScrollingCameraTest: Running test: Camera instantiation
ScrollingCameraTest: PASS: Camera instantiation
ScrollingCameraTest: Running test: Test mode setting
Setting test_mode to: True
Initializing TestBoundsValidator for test mode
TestBoundsValidator initialized - bounds validation disabled for testing
BoundsValidator initialized: Reference
ScrollingCameraTest: PASS: Test mode setting
ScrollingCameraTest: Running test: Camera state control
[CAMERA DEBUG] Camera state changed from FOLLOWING_PLAYER to IDLE
[CAMERA DEBUG] Camera state changed from IDLE to FOLLOWING_PLAYER
[CAMERA DEBUG] Camera state changed from FOLLOWING_PLAYER to IDLE
ScrollingCameraTest: PASS: Camera state control
ScrollingCameraTest: Running test: Default bounds settings
ScrollingCameraTest: PASS: Default bounds settings
ScrollingCameraTest: Running test: Bounds enabled setting
ScrollingCameraTest: PASS: Bounds enabled setting
ScrollingCameraTest: === Running Movement Tests ===
ScrollingCameraTest: Running test: Immediate movement
ensure_valid_target called with position: (812, 476)
Current test_mode value: True
[TEST] Bypassing all bounds validation due to test_mode=true for: (812, 476)
move_to_position called with pos=(812, 476), immediate=True
Target position after validation: (812, 476)
Immediate move from (712, 476) to (812, 476)
ScrollingCameraTest: PASS: Immediate movement
ScrollingCameraTest: Running test: Movement with transition
ensure_valid_target called with position: (912, 476)
Current test_mode value: True
[TEST] Bypassing all bounds validation due to test_mode=true for: (912, 476)
move_to_position called with pos=(912, 476), immediate=False
Target position after validation: (912, 476)
Starting animated movement to (912, 476)
[CAMERA DEBUG] Camera state changed from IDLE to MOVING
[CAMERA DEBUG] Camera transition: Progress 0.5, Position (853, 476), Target (912, 476)
[CAMERA DEBUG] Camera transition: Progress 1, Position (912, 476), Target (912, 476)
[CAMERA DEBUG] Camera state changed from MOVING to IDLE
[CAMERA DEBUG] Camera transition completed to (912, 476), took 0.001s
ScrollingCameraTest: PASS: Movement with transition
ScrollingCameraTest: Running test: Movement easing types
ensure_valid_target called with position: (812, 476)
Current test_mode value: True
[TEST] Bypassing all bounds validation due to test_mode=true for: (812, 476)
move_to_position called with pos=(812, 476), immediate=False
Target position after validation: (812, 476)
Starting animated movement to (812, 476)
[CAMERA DEBUG] Camera state changed from IDLE to MOVING
[CAMERA DEBUG] Camera transition: Progress 0.5, Position (762, 476), Target (812, 476)
[CAMERA DEBUG] Camera transition: Progress 1, Position (812, 476), Target (812, 476)
[CAMERA DEBUG] Camera state changed from MOVING to IDLE
[CAMERA DEBUG] Camera transition completed to (812, 476), took 0.016s
ensure_valid_target called with position: (812, 476)
Current test_mode value: True
[TEST] Bypassing all bounds validation due to test_mode=true for: (812, 476)
move_to_position called with pos=(812, 476), immediate=False
Target position after validation: (812, 476)
Starting animated movement to (812, 476)
[CAMERA DEBUG] Camera state changed from IDLE to MOVING
[CAMERA DEBUG] Camera transition: Progress 0.5, Position (737, 476), Target (812, 476)
[CAMERA DEBUG] Camera transition: Progress 1, Position (812, 476), Target (812, 476)
[CAMERA DEBUG] Camera state changed from MOVING to IDLE
[CAMERA DEBUG] Camera transition completed to (812, 476), took 0.016s
ensure_valid_target called with position: (812, 476)
Current test_mode value: True
[TEST] Bypassing all bounds validation due to test_mode=true for: (812, 476)
move_to_position called with pos=(812, 476), immediate=False
Target position after validation: (812, 476)
Starting animated movement to (812, 476)
[CAMERA DEBUG] Camera state changed from IDLE to MOVING
[CAMERA DEBUG] Camera transition: Progress 0.5, Position (787, 476), Target (812, 476)
[CAMERA DEBUG] Camera transition: Progress 1, Position (812, 476), Target (812, 476)
[CAMERA DEBUG] Camera state changed from MOVING to IDLE
[CAMERA DEBUG] Camera transition completed to (812, 476), took 0.017s
ScrollingCameraTest: PASS: Movement easing types
ScrollingCameraTest: === Running Bounds Tests ===
ScrollingCameraTest: Running test: Bounds initialization
ScrollingCameraTest: PASS: Bounds initialization
ScrollingCameraTest: Running test: Test mode bounds bypass
Setting test_mode to: True
Initializing TestBoundsValidator for test mode
TestBoundsValidator initialized - bounds validation disabled for testing
BoundsValidator initialized: Reference
ensure_valid_target called with position: (-1000, -1000)
Current test_mode value: True
[TEST] Bypassing all bounds validation due to test_mode=true for: (-1000, -1000)
move_to_position called with pos=(-1000, -1000), immediate=True
Target position after validation: (-1000, -1000)
Immediate move from (712, 476) to (-1000, -1000)
ScrollingCameraTest: PASS: Test mode bounds bypass
ScrollingCameraTest: Running test: Default validator bounds enforcement
Setting test_mode to: False
Initializing DefaultBoundsValidator with bounds: (0, 0, 1424, 952)
BoundsValidator initialized: Reference
ensure_valid_target called with position: (-1000, -1000)
Current test_mode value: False
Camera half size: (712, 476)
Position adjusted by bounds: (-1000, -1000) -> (712, 476)
Position adjusted by bounds validator: (-1000, -1000) -> (712, 476)
ensure_valid_target called with position: (-1000, -1000)
Current test_mode value: False
Camera half size: (712, 476)
Position adjusted by bounds: (-1000, -1000) -> (712, 476)
Position adjusted by bounds validator: (-1000, -1000) -> (712, 476)
move_to_position called with pos=(-1000, -1000), immediate=True
Target position after validation: (712, 476)
Immediate move from (712, 476) to (712, 476)
Setting test_mode to: True
Initializing TestBoundsValidator for test mode
TestBoundsValidator initialized - bounds validation disabled for testing
BoundsValidator initialized: Reference
ScrollingCameraTest: PASS: Default validator bounds enforcement
ScrollingCameraTest: Running test: Update bounds method
ScrollingCameraTest: PASS: Update bounds method
ScrollingCameraTest: Running test: Viewport-aware bounds calculation

========== DISTRICT BOUNDS CALCULATION STARTED ==========
Background dimensions: (4698, 952)
Screen size: (1424, 952)
Current camera zoom: (1, 1)
Number of walkable areas: 1

========== BOUNDS CALCULATION STARTED ==========
Number of walkable areas: 1
Using get_polygon() interface method
Processing walkable area: FloorWalkableArea with 4 points
Area transform: ((1, 0), (0, 1), (0, 0))
Point 0 - Local: (0, 822), Global: (0, 822)
Point 1 - Local: (4691, 822), Global: (4691, 822)
Point 2 - Local: (4691, 947), Global: (4691, 947)
Point 3 - Local: (0, 947), Global: (0, 947)
Note: Rect2.expand() did not change bounds for point (0, 947) - this is normal for some polygon arrangements
Raw calculated bounds: (0, 822, 4691, 125)
Bounds after margin adjustment: (-1, 821, 4693, 127)
Final corrected bounds: (-1, 821, 4693, 127)
========== BOUNDS CALCULATION COMPLETED ==========

Viewport-aware height calculation: 952 * 0.3 = 285.6
INFO: Walkable area height is 127 pixels
This is normal for floor-based walkable areas
Adjusting camera height bounds to 285.6 pixels for better visibility
Height-to-viewport ratio: 0.3 (30%)
This preserves the exact floor walkable area while improving camera view
NOTE: Walkable area is much smaller than background.
This is often intentional for floor-based walkable areas.
Using the exact walkable area as specified in the coordinates.
Final district bounds: (-1, 741.700012, 4693, 285.600006)
========== DISTRICT BOUNDS CALCULATION COMPLETED ==========

ScrollingCameraTest: Viewport size: (1424, 952)
ScrollingCameraTest: Calculated bounds: (-1, 741.700012, 4693, 285.600006)
ScrollingCameraTest: Bounds height: 285.600006
ScrollingCameraTest: Viewport height: 952
ScrollingCameraTest: Height ratio (bounds/viewport): 0.3
ScrollingCameraTest: Is height ratio acceptable (>=0.3): True
ScrollingCameraTest: PASS: Viewport-aware bounds calculation
ScrollingCameraTest: Running test: Background scaling hybrid architecture validation

========== DISTRICT BOUNDS CALCULATION STARTED ==========
Background dimensions: (2448, 496)
Screen size: (1424, 952)
Current camera zoom: (1, 1)
Number of walkable areas: 1

========== BOUNDS CALCULATION STARTED ==========
Number of walkable areas: 1
Using get_polygon() interface method
Processing walkable area: ScalingWalkableArea with 4 points
Area transform: ((1, 0), (0, 1), (0, 0))
Point 0 - Local: (0, 822), Global: (0, 822)
Point 1 - Local: (4691, 822), Global: (4691, 822)
Point 2 - Local: (4691, 947), Global: (4691, 947)
Point 3 - Local: (0, 947), Global: (0, 947)
Note: Rect2.expand() did not change bounds for point (0, 947) - this is normal for some polygon arrangements
Raw calculated bounds: (0, 822, 4691, 125)
Bounds after margin adjustment: (-1, 821, 4693, 127)
Final corrected bounds: (-1, 821, 4693, 127)
========== BOUNDS CALCULATION COMPLETED ==========

Viewport-aware height calculation: 952 * 0.3 = 285.6
INFO: Walkable area height is 127 pixels
This is normal for floor-based walkable areas
Adjusting camera height bounds to 285.6 pixels for better visibility
Height-to-viewport ratio: 0.3 (30%)
This preserves the exact floor walkable area while improving camera view
Final district bounds: (-1, 741.700012, 4693, 285.600006)
========== DISTRICT BOUNDS CALCULATION COMPLETED ==========

ScrollingCameraTest: Expected viewport-aware bounds: (-1, 741.700012, 4693, 285.600006)
ScrollingCameraTest: Expected bounds height: 285.600006

===== CALCULATING OPTIMAL ZOOM =====
Found background sprite with texture size: (2448, 496)
Current background scale: (1, 1)
Effective background size with current scale: (2448, 496)
Scale needed to fill viewport height: 1.919355
Applied new scale to background: (1.919355, 1.919355)
[SCALING DEBUG] Background vertical positioning applied:
[SCALING DEBUG] - Viewport height: 952
[SCALING DEBUG] - Scaled background height: 952
[SCALING DEBUG] - Applied y_offset: 0
New effective background size: (4698.580566, 952)
Camera zoom left at 1.0 (since we're scaling the background)
Updated camera bounds to match scaled background for visual correctness: (0, 0, 4698.580566, 952)
[TEST] Set bounds to: (0, 0, 4698.580566, 952) (ignored in test validator)
Updated bounds validator with new camera bounds
===== ZOOM CALCULATION COMPLETE =====

ScrollingCameraTest: Bounds after background scaling: (0, 0, 4698.580566, 952)
ScrollingCameraTest: Bounds height after scaling: 952
ScrollingCameraTest: Bounds were overridden: True
ScrollingCameraTest: Bounds match scaled background: True
ScrollingCameraTest: PASS: Background scaling hybrid architecture validation
ScrollingCameraTest: Running test: Background scaling visual requirement

===== CALCULATING OPTIMAL ZOOM =====
Found background sprite with texture size: (2448, 496)
Current background scale: (1, 1)
Effective background size with current scale: (2448, 496)
Scale needed to fill viewport height: 1.919355
Applied new scale to background: (1.919355, 1.919355)
[SCALING DEBUG] Background vertical positioning applied:
[SCALING DEBUG] - Viewport height: 952
[SCALING DEBUG] - Scaled background height: 952
[SCALING DEBUG] - Applied y_offset: 0
New effective background size: (4698.580566, 952)
Camera zoom left at 1.0 (since we're scaling the background)
Updated camera bounds to match scaled background for visual correctness: (0, 0, 4698.580566, 952)
[TEST] Set bounds to: (0, 0, 4698.580566, 952) (ignored in test validator)
Updated bounds validator with new camera bounds
===== ZOOM CALCULATION COMPLETE =====

ScrollingCameraTest: Background scale after calculate_optimal_zoom: (1.919355, 1.919355)
ScrollingCameraTest: Expected scale for viewport fill: 1.919355
ScrollingCameraTest: Final camera bounds: (0, 0, 4698.580566, 952)
ScrollingCameraTest: Scaled background size: (4698.580566, 952)
ScrollingCameraTest: Bounds match scaled background: True
ScrollingCameraTest: PASS: Background scaling visual requirement
ScrollingCameraTest: Running test: Bounds validator synchronization with background scaling

========== DISTRICT BOUNDS CALCULATION STARTED ==========
Background dimensions: (2448, 496)
Screen size: (1424, 952)
Current camera zoom: (1, 1)
Number of walkable areas: 1

========== BOUNDS CALCULATION STARTED ==========
Number of walkable areas: 1
Using get_polygon() interface method
Processing walkable area: SyncWalkableArea with 4 points
Area transform: ((1, 0), (0, 1), (0, 0))
Point 0 - Local: (0, 822), Global: (0, 822)
Point 1 - Local: (4691, 822), Global: (4691, 822)
Point 2 - Local: (4691, 947), Global: (4691, 947)
Point 3 - Local: (0, 947), Global: (0, 947)
Note: Rect2.expand() did not change bounds for point (0, 947) - this is normal for some polygon arrangements
Raw calculated bounds: (0, 822, 4691, 125)
Bounds after margin adjustment: (-1, 821, 4693, 127)
Final corrected bounds: (-1, 821, 4693, 127)
========== BOUNDS CALCULATION COMPLETED ==========

Viewport-aware height calculation: 952 * 0.3 = 285.6
INFO: Walkable area height is 127 pixels
This is normal for floor-based walkable areas
Adjusting camera height bounds to 285.6 pixels for better visibility
Height-to-viewport ratio: 0.3 (30%)
This preserves the exact floor walkable area while improving camera view
Final district bounds: (-1, 741.700012, 4693, 285.600006)
========== DISTRICT BOUNDS CALCULATION COMPLETED ==========

ScrollingCameraTest: Initial bounds before scaling: (-1, 741.700012, 4693, 285.600006)

===== CALCULATING OPTIMAL ZOOM =====
Found background sprite with texture size: (2448, 496)
Current background scale: (1, 1)
Effective background size with current scale: (2448, 496)
Scale needed to fill viewport height: 1.919355
Applied new scale to background: (1.919355, 1.919355)
[SCALING DEBUG] Background vertical positioning applied:
[SCALING DEBUG] - Viewport height: 952
[SCALING DEBUG] - Scaled background height: 952
[SCALING DEBUG] - Applied y_offset: 0
New effective background size: (4698.580566, 952)
Camera zoom left at 1.0 (since we're scaling the background)
Updated camera bounds to match scaled background for visual correctness: (0, 0, 4698.580566, 952)
[TEST] Set bounds to: (0, 0, 4698.580566, 952) (ignored in test validator)
Updated bounds validator with new camera bounds
===== ZOOM CALCULATION COMPLETE =====

ScrollingCameraTest: Final bounds after scaling: (0, 0, 4698.580566, 952)
ScrollingCameraTest: Bounds were overridden: True
Setting test_mode to: False
Initializing DefaultBoundsValidator with bounds: (0, 0, 4698.580566, 952)
BoundsValidator initialized: Reference
ScrollingCameraTest: Testing position: (4598.580566, 852)
ScrollingCameraTest: Against bounds: (0, 0, 4698.580566, 952)
ensure_valid_target called with position: (4598.580566, 852)
Current test_mode value: False
Camera half size: (712, 476)
Position adjusted by bounds: (4598.580566, 852) -> (3986.580566, 476)
Position adjusted by bounds validator: (4598.580566, 852) -> (3986.580566, 476)
ScrollingCameraTest: Validated position: (3986.580566, 476)
ScrollingCameraTest: Validated position within new bounds area: True
ScrollingCameraTest: PASS: Bounds validator synchronization with background scaling
ScrollingCameraTest: === Running State Tests ===
ScrollingCameraTest: Running test: State transitions
[CAMERA DEBUG] Camera state changed from IDLE to MOVING
[CAMERA DEBUG] Camera state changed from MOVING to FOLLOWING_PLAYER
[CAMERA DEBUG] Camera state changed from FOLLOWING_PLAYER to IDLE
ScrollingCameraTest: PASS: State transitions
ScrollingCameraTest: Running test: State helper methods
[CAMERA DEBUG] Camera state changed from IDLE to MOVING
[CAMERA DEBUG] Camera state changed from MOVING to FOLLOWING_PLAYER
[CAMERA DEBUG] Camera state changed from FOLLOWING_PLAYER to IDLE
ScrollingCameraTest: PASS: State helper methods
ScrollingCameraTest: === Running Coordinate Tests ===
ScrollingCameraTest: Running test: Screen to world conversion
ScrollingCameraTest: PASS: Screen to world conversion
ScrollingCameraTest: Running test: World to screen conversion
ScrollingCameraTest: PASS: World to screen conversion
ScrollingCameraTest: Running test: Coordinate validation
WARNING: Camera: Invalid coordinate detected (NaN). Using camera position as fallback.
     at: call (modules/gdscript/gdscript_functions.cpp:789)
WARNING: Camera: Invalid coordinate detected (Infinite). Using camera position as fallback.
     at: call (modules/gdscript/gdscript_functions.cpp:789)
ScrollingCameraTest: PASS: Coordinate validation
ScrollingCameraTest: === Running Signal Tests ===
ScrollingCameraTest: Running test: State change signal
ScrollingCameraTest: Received state_changed signal: 1 from 0 reason: manual_transition
[CAMERA DEBUG] Camera state changed from IDLE to MOVING
[CAMERA DEBUG] Camera state changed from MOVING to IDLE
ScrollingCameraTest: PASS: State change signal
ScrollingCameraTest: Running test: Movement signals
ensure_valid_target called with position: (812, 476)
Current test_mode value: False
Camera half size: (712, 476)
move_to_position called with pos=(812, 476), immediate=False
Target position after validation: (812, 476)
Starting animated movement to (812, 476)
ScrollingCameraTest: Received move_started signal: (812, 476)
[CAMERA DEBUG] Camera state changed from IDLE to MOVING
[CAMERA DEBUG] Camera transition: Progress 0.5, Position (787, 476), Target (812, 476)
[CAMERA DEBUG] Camera transition: Progress 1, Position (812, 476), Target (812, 476)
ScrollingCameraTest: Received move_completed signal: (812, 476)
ScrollingCameraTest: Received move_completed signal: (812, 476)
[CAMERA DEBUG] Camera state changed from MOVING to IDLE
[CAMERA DEBUG] Camera transition completed to (812, 476), took 0.015s
ScrollingCameraTest: PASS: Movement signals
ScrollingCameraTest: Running test: Bounds change signal
ScrollingCameraTest: Received view_bounds_changed signal: (10, 10, 4698.580566, 952)
ScrollingCameraTest: PASS: Bounds change signal
ScrollingCameraTest: Running test: Pixel-perfect camera positioning
ScrollingCameraTest: PASS: Pixel-perfect camera positioning
ScrollingCameraTest: All tests completed
ScrollingCameraTest: === TEST RESULTS ===
ScrollingCameraTest: Total tests: 25
ScrollingCameraTest: Passed: 25
ScrollingCameraTest: Failed: 0
ScrollingCameraTest: 
All tests passed! 🎉

=== Test: camera_walkable_integration_test ===
Exit code: 0
Godot Engine v3.5.2.stable.official.170ba337a - https://godotengine.org
OpenGL ES 2.0 Renderer: Mesa Intel(R) Graphics (ADL GT2)
 
[DEBUG SINGLETON] Initialized - Press backtick (`) key for console
CoordinateManager initialized
Setting up Camera-Walkable Area Integration test...
Setting test_mode to: False
Initializing DefaultBoundsValidator with bounds: (0, 0, 0, 0)
BoundsValidator initialized: Reference
ScrollingCamera._ready() called - Script Path: res://src/core/camera/scrolling_camera.gd
ScrollingCamera class loaded - Script ID: 1305
[TRACE] Camera initialized with screen size: (1424, 952)
Debug drawing is disabled
No target player set
Test scene created with district, walkable area, camera, and player
Starting Camera-Walkable Area Integration tests...
Running test suite: bounds_calculation with timeout protection
===== TEST SUITE: Bounds Calculation =====
Running test: Camera Calculates Bounds

========== DISTRICT BOUNDS CALCULATION STARTED ==========
Background dimensions: (1000, 600)
Screen size: (1424, 952)
Current camera zoom: (1, 1)
Number of walkable areas: 1

========== BOUNDS CALCULATION STARTED ==========
Number of walkable areas: 1
Using get_polygon() interface method
Processing walkable area: WalkableArea with 4 points
Area transform: ((1, 0), (0, 1), (0, 0))
Point 0 - Local: (100, 100), Global: (100, 100)
Point 1 - Local: (900, 100), Global: (900, 100)
Point 2 - Local: (900, 500), Global: (900, 500)
Point 3 - Local: (100, 500), Global: (100, 500)
Note: Rect2.expand() did not change bounds for point (100, 500) - this is normal for some polygon arrangements
Raw calculated bounds: (100, 100, 800, 400)
Bounds after margin adjustment: (99, 99, 802, 402)
Final corrected bounds: (99, 99, 802, 402)
========== BOUNDS CALCULATION COMPLETED ==========

Viewport-aware height calculation: 952 * 0.3 = 285.6
Final district bounds: (99, 99, 802, 402)
========== DISTRICT BOUNDS CALCULATION COMPLETED ==========

✓ PASS: Camera Calculates Bounds: Camera should calculate bounds from walkable areas
Running test: Bounds Contain Walkable Areas

========== DISTRICT BOUNDS CALCULATION STARTED ==========
Background dimensions: (1000, 600)
Screen size: (1424, 952)
Current camera zoom: (1, 1)
Number of walkable areas: 1

========== BOUNDS CALCULATION STARTED ==========
Number of walkable areas: 1
Using get_polygon() interface method
Processing walkable area: WalkableArea with 4 points
Area transform: ((1, 0), (0, 1), (0, 0))
Point 0 - Local: (100, 100), Global: (100, 100)
Point 1 - Local: (900, 100), Global: (900, 100)
Point 2 - Local: (900, 500), Global: (900, 500)
Point 3 - Local: (100, 500), Global: (100, 500)
Note: Rect2.expand() did not change bounds for point (100, 500) - this is normal for some polygon arrangements
Raw calculated bounds: (100, 100, 800, 400)
Bounds after margin adjustment: (99, 99, 802, 402)
Final corrected bounds: (99, 99, 802, 402)
========== BOUNDS CALCULATION COMPLETED ==========

Viewport-aware height calculation: 952 * 0.3 = 285.6
Final district bounds: (99, 99, 802, 402)
========== DISTRICT BOUNDS CALCULATION COMPLETED ==========

✓ PASS: Bounds Contain Walkable Areas: Camera bounds should contain all walkable area points
Running test: Bounds Update on District Change

========== DISTRICT BOUNDS CALCULATION STARTED ==========
Background dimensions: (1000, 600)
Screen size: (1424, 952)
Current camera zoom: (1, 1)
Number of walkable areas: 1

========== BOUNDS CALCULATION STARTED ==========
Number of walkable areas: 1
Using get_polygon() interface method
Processing walkable area: WalkableArea with 4 points
Area transform: ((1, 0), (0, 1), (0, 0))
Point 0 - Local: (200, 200), Global: (200, 200)
Point 1 - Local: (800, 200), Global: (800, 200)
Point 2 - Local: (800, 400), Global: (800, 400)
Point 3 - Local: (200, 400), Global: (200, 400)
Note: Rect2.expand() did not change bounds for point (200, 400) - this is normal for some polygon arrangements
Raw calculated bounds: (200, 200, 600, 200)
Bounds after margin adjustment: (199, 199, 602, 202)
Final corrected bounds: (199, 199, 602, 202)
========== BOUNDS CALCULATION COMPLETED ==========

Viewport-aware height calculation: 952 * 0.3 = 285.6
INFO: Walkable area height is 202 pixels
This is normal for floor-based walkable areas
Adjusting camera height bounds to 285.6 pixels for better visibility
Height-to-viewport ratio: 0.3 (30%)
This preserves the exact floor walkable area while improving camera view
NOTE: Walkable area is much smaller than background.
This is often intentional for floor-based walkable areas.
Using the exact walkable area as specified in the coordinates.
Final district bounds: (199, 157.199997, 602, 285.600006)
========== DISTRICT BOUNDS CALCULATION COMPLETED ==========

[CAMERA DEBUG] CoordinateManager singleton not available for registration
✓ PASS: Bounds Update on District Change: Camera bounds should update when walkable areas change
Suite completed: 3/3 tests passed
Running test suite: camera_constraint with timeout protection
===== TEST SUITE: Camera Constraint =====
Running test: Camera Stays Within Bounds
ensure_valid_target called with position: (2000, 2000)
Current test_mode value: False
Camera half size: (712, 476)
WARNING: Camera width exceeds bounds width. Centering camera horizontally.
WARNING: Camera height exceeds bounds height. Centering camera vertically.
Position adjusted by bounds: (2000, 2000) -> (500, 300)
Position adjusted by bounds validator: (2000, 2000) -> (500, 300)
move_to_position called with pos=(2000, 2000), immediate=True
Target position after validation: (500, 300)
Immediate move from (500, 300) to (500, 300)
ensure_valid_target called with position: (500, 300)
Current test_mode value: False
Camera half size: (712, 476)
WARNING: Camera width exceeds bounds width. Centering camera horizontally.
WARNING: Camera height exceeds bounds height. Centering camera vertically.
move_to_position called with pos=(500, 300), immediate=True
Target position after validation: (500, 300)
Immediate move from (500, 300) to (500, 300)
✓ PASS: Camera Stays Within Bounds: Camera should stay within calculated bounds
Running test: Camera Handles Invalid Targets
WARNING: Camera: Invalid coordinate detected (NaN). Using camera position as fallback.
     at: call (modules/gdscript/gdscript_functions.cpp:789)
ensure_valid_target called with position: (nan, 100)
Current test_mode value: False
Camera half size: (712, 476)
WARNING: Camera width exceeds bounds width. Centering camera horizontally.
WARNING: Camera height exceeds bounds height. Centering camera vertically.
move_to_position called with pos=(nan, 100), immediate=True
Target position after validation: (500, 300)
Immediate move from (500, 300) to (500, 300)
ensure_valid_target called with position: (500, 300)
Current test_mode value: False
Camera half size: (712, 476)
WARNING: Camera width exceeds bounds width. Centering camera horizontally.
WARNING: Camera height exceeds bounds height. Centering camera vertically.
move_to_position called with pos=(500, 300), immediate=True
Target position after validation: (500, 300)
Immediate move from (500, 300) to (500, 300)
✓ PASS: Camera Handles Invalid Targets: Camera should handle invalid target positions
Running test: Camera Uses BoundsCalculator

========== DISTRICT BOUNDS CALCULATION STARTED ==========
Background dimensions: (1000, 600)
Screen size: (1424, 952)
Current camera zoom: (1, 1)
Number of walkable areas: 2

========== BOUNDS CALCULATION STARTED ==========
Number of walkable areas: 2
Using get_polygon() interface method
Processing walkable area: WalkableArea with 4 points
Area transform: ((1, 0), (0, 1), (0, 0))
Point 0 - Local: (100, 100), Global: (100, 100)
Point 1 - Local: (900, 100), Global: (900, 100)
Point 2 - Local: (900, 500), Global: (900, 500)
Point 3 - Local: (100, 500), Global: (100, 500)
Note: Rect2.expand() did not change bounds for point (100, 500) - this is normal for some polygon arrangements
Using get_polygon() interface method
Processing walkable area: @WalkableArea@3 with 4 points
Area transform: ((1, 0), (0, 1), (0, 0))
Point 0 - Local: (0, 0), Global: (0, 0)
Point 1 - Local: (1000, 0), Global: (1000, 0)
Point 2 - Local: (1000, 600), Global: (1000, 600)
Point 3 - Local: (0, 600), Global: (0, 600)
Note: Rect2.expand() did not change bounds for point (0, 600) - this is normal for some polygon arrangements
Raw calculated bounds: (0, 0, 1000, 600)
Bounds after margin adjustment: (-1, -1, 1002, 602)
Final corrected bounds: (-1, -1, 1002, 602)
========== BOUNDS CALCULATION COMPLETED ==========

Viewport-aware height calculation: 952 * 0.3 = 285.6
Final district bounds: (-1, -1, 1002, 602)
========== DISTRICT BOUNDS CALCULATION COMPLETED ==========

✓ PASS: Camera Uses BoundsCalculator: Camera should use BoundsCalculator to calculate bounds
Suite completed: 3/3 tests passed
Running test suite: coordinate_transformations with timeout protection
===== TEST SUITE: Coordinate Transformations =====
Running test: Screen to World with Camera
✓ PASS: Screen to World with Camera: Screen-to-world conversion should map screen center to camera position
Running test: World to Screen with Camera
✓ PASS: World to Screen with Camera: World-to-screen conversion should map camera position to screen center
Running test: District Camera Coordinate Methods Match
✓ PASS: District Camera Coordinate Methods Match: District and camera coordinate methods should give consistent results
Suite completed: 3/3 tests passed
Running test suite: view_modes with timeout protection
===== TEST SUITE: View Modes =====
Running test: World View Coordinate Transformations
✓ PASS: World View Coordinate Transformations: World view coordinates should be properly transformed to game view
Running test: Game View Coordinate Transformations
✓ PASS: Game View Coordinate Transformations: Game view coordinates should be properly transformed to world view
Running test: View Mode Transformation Consistency
✓ PASS: View Mode Transformation Consistency: View mode transformations should be consistent when applied bidirectionally
Suite completed: 3/3 tests passed
Running test suite: player_movement with timeout protection
===== TEST SUITE: Player Movement =====
Running test: Camera Follows Player Movement
Setting target_player to: MockPlayer:[Node2D:1310]
[CAMERA DEBUG] Camera state changed from IDLE to FOLLOWING_PLAYER
Running test: Camera Stops at Boundaries
Setting target_player to: MockPlayer:[Node2D:1310]
Running test: Player Stays Within Walkable Areas
✓ PASS: Player Stays Within Walkable Areas: Walkable area detection should correctly identify valid positions
Suite completed: 1/1 tests passed
All tests completed.

===== TEST RESULTS =====
Total Tests: 13
Passed: 13
Failed: 0

All tests passed! 🎉
Tests complete - exiting...
[CAMERA DEBUG] CoordinateManager singleton not available for registration
ERROR: Resumed function '_ready()' after yield, but script is gone. At script: res://src/core/camera/scrolling_camera.gd:441
   at: resume (modules/gdscript/gdscript_function.cpp:1795)

